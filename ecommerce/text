Implementing Django's Standard Token Authentication
I'll show you how to implement Django REST Framework's built-in TokenAuthentication while maintaining your cart functionality and role-based authorization.

1. First, set up token authentication
Update settings.py:
python
INSTALLED_APPS = [
    ...
    'rest_framework',
    'rest_framework.authtoken',  # Add this for token support
    ...
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
}
Run migrations to create token tables:
bash
python manage.py migrate
2. Update your authentication views
In views.py:
python
from rest_framework.authtoken.views import ObtainAuthToken
from rest_framework.authtoken.models import Token
from rest_framework.response import Response
from django.db import transaction

class CustomAuthToken(ObtainAuthToken):
    def post(self, request, *args, **kwargs):
        serializer = self.serializer_class(data=request.data,
                                         context={'request': request})
        serializer.is_valid(raise_exception=True)
        user = serializer.validated_data['user']

        # Delete existing tokens (optional - for single device login)
        Token.objects.filter(user=user).delete()

        # Create new token
        token, created = Token.objects.get_or_create(user=user)

        # Merge anonymous cart with user cart
        self.merge_carts(request, user)

        return Response({
            'token': token.key,
            'user_id': user.pk,
            'email': user.email,
            'user_type': user.get_user_type_display(),
        })

    def merge_carts(self, request, user):
        """Merge anonymous cart with user cart on login"""
        session_key = request.session.session_key
        if not session_key:
            return

        with transaction.atomic():
            try:
                anonymous_cart = Cart.objects.get(session_key=session_key)
                user_cart, created = Cart.objects.get_or_create(user=user)

                for item in anonymous_cart.items.all():
                    try:
                        existing_item = user_cart.items.get(product=item.product)
                        existing_item.quantity += item.quantity
                        existing_item.save()
                    except CartItem.DoesNotExist:
                        item.cart = user_cart
                        item.save()

                anonymous_cart.delete()
                if hasattr(request, 'session'):
                    request.session['cart_id'] = user_cart.cart_id
            except Cart.DoesNotExist:
                pass

class RegisterView(APIView):
    authentication_classes = []
    permission_classes = []

    def post(self, request):
        serializer = UserSerializer(data=request.data)
        if serializer.is_valid():
            user = serializer.save()

            # Create token for the new user
            token = Token.objects.create(user=user)

            return Response({
                'token': token.key,
                'user': UserSerializer(user).data
            }, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
3. Update your URLs
In urls.py:
python
from django.urls import path
from rest_framework.routers import DefaultRouter
from .views import (
    ProductViewSet,
    CartViewSet,
    CartItemViewSet,
    OrderViewset,
    CustomAuthToken,
    RegisterView
)

router = DefaultRouter()
router.register(r'products', ProductViewSet, basename='products')
router.register(r'cart', CartViewSet, basename='cart')
router.register(r'cart-items', CartItemViewSet, basename='cart-items')
router.register(r'order', OrderViewset, basename='order')

urlpatterns = [
    path('api-token-auth/', CustomAuthToken.as_view(), name='api_token_auth'),
    path('register/', RegisterView.as_view(), name='register'),
] + router.urls
4. Update your view permissions
Create permissions.py:
python
from rest_framework import permissions

class IsAdminUser(permissions.BasePermission):
    def has_permission(self, request, view):
        return request.user.is_authenticated and request.user.user_type == 1

class IsStaffUser(permissions.BasePermission):
    def has_permission(self, request, view):
        return request.user.is_authenticated and request.user.user_type in [1, 2]

class IsCustomerUser(permissions.BasePermission):
    def has_permission(self, request, view):
        return request.user.is_authenticated and request.user.user_type == 3
Update your views to use these permissions:
python
from .permissions import IsAdminUser, IsStaffUser, IsCustomerUser

class ProductViewSet(viewsets.ModelViewSet):
    queryset = Product.objects.all()
    serializer_class = ProductSerializer

    def get_permissions(self):
        if self.action in ['create', 'update', 'partial_update', 'destroy']:
            permission_classes = [IsAdminUser]
        else:
            permission_classes = [permissions.IsAuthenticated]
        return [permission() for permission in permission_classes]

class OrderViewset(viewsets.ModelViewSet):
    serializer_class = OrderSerializer
    queryset = Order.objects.prefetch_related('items__product')

    def get_permissions(self):
        if self.action in ['list', 'retrieve']:
            permission_classes = [IsStaffUser | IsCustomerUser]
        else:
            permission_classes = [IsCustomerUser]
        return [permission() for permission in permission_classes]

    def get_queryset(self):
        if self.request.user.user_type in [1, 2]:  # Admin or staff
            return self.queryset.all()
        return self.queryset.filter(user=self.request.user)
5. Update cart views for token auth
python
class CartItemViewSet(viewsets.ModelViewSet):
    serializer_class = CartItemSerializer
    queryset = CartItem.objects.select_related('product')
    authentication_classes = [TokenAuthentication, SessionAuthentication]

    def get_queryset(self):
        if self.request.user.is_authenticated:
            return self.queryset.filter(cart__user=self.request.user)
        else:
            session_key = self.request.session.session_key
            if not session_key:
                self.request.session.create()
                return self.queryset.none()
            return self.queryset.filter(cart__session_key=session_key)

    def perform_create(self, serializer):
        with transaction.atomic():
            product = serializer.validated_data['product']
            quantity = serializer.validated_data['quantity']

            if self.request.user.is_authenticated:
                cart, _ = Cart.objects.get_or_create(user=self.request.user)
            else:
                session_key = self.request.session.session_key
                if not session_key:
                    self.request.session.create()
                    session_key = self.request.session.session_key
                cart, _ = Cart.objects.get_or_create(
                    session_key=session_key,
                    defaults={'user': None}
                )

            cart_item, created = CartItem.objects.get_or_create(
                cart=cart,
                product=product,
                defaults={
                    'quantity': quantity,
                    'price': product.price
                })

            if not created:
                cart_item.quantity += quantity
                cart_item.price = product.price
                cart_item.save()

            serializer.instance = cart_item
How to Use This Implementation:
Registration:

bash
POST /register/
{
    "username": "newuser",
    "email": "user@example.com",
    "password": "securepassword123",
    "user_type": 3
}
Login (Get Token):

bash
POST /api-token-auth/
{
    "username": "user@example.com",
    "password": "securepassword123"
}
Authenticated Requests:

bash
GET /api/app/products/
Authorization: Token 9944b09199c62bcf9418ad846dd0e4bbdfc6ee4b
Cart Operations:

Works for both authenticated users (via token) and anonymous users (via session)

Automatically merges carts when user logs in

Key Features:
Standard Token Authentication:

Uses Django REST Framework's built-in TokenAuthentication

Simple and well-documented approach

Role-Based Access Control:

Three distinct user types (Admin, Staff, Customer)

Custom permission classes for each role

Cart Functionality:

Maintains both token-based and session-based carts

Automatic cart merging on login

Proper handling of anonymous users

Security:

Tokens are securely stored in the database

Optional single-device login (delete old tokens on login)

Proper permission checks on all views

This implementation provides a clean, maintainable way to use Django's standard token authentication while meeting all your requirements for user roles and cart functionality.